{"version":3,"file":"static/js/420.90918811.chunk.js","mappings":"sLAwDA,QAnDA,WACE,MAAM,GAAEA,IAAOC,EAAAA,EAAAA,MACTC,GAAWC,EAAAA,EAAAA,OACX,MAAEC,EAAK,SAAEC,IAAaC,EAAAA,EAAAA,YAAWC,EAAAA,IAChCC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,MA8BjD,IA5BAC,EAAAA,EAAAA,YAAU,KACkBC,WACxB,IACE,MAAMC,QAAiBC,EAAAA,EAAIC,IAAI,OAADC,OAAQhB,IACtCS,EAAgBI,EAASI,KAC3B,CAAE,MAAOC,GACPC,QAAQD,MAAM,gCAAiCA,EACjD,GAGFE,EAAmB,GAClB,CAACpB,KAiBCQ,EACH,OAAOa,EAAAA,EAAAA,KAAA,OAAAC,SAAK,eAGd,MAAM,MAAEC,EAAK,KAAEC,EAAI,MAAEC,EAAK,OAAEC,GAAWlB,EAEvC,OACEmB,EAAAA,EAAAA,MAAA,OAAAL,SAAA,EACED,EAAAA,EAAAA,KAAA,MAAAC,SAAKC,KACLF,EAAAA,EAAAA,KAAA,UAAQO,QAxBiBC,KACEzB,EAAM0B,UAAUC,MAAMC,GAAaA,EAASC,SAAWjC,IAUlFmB,QAAQe,IAAI,GAADlB,OAAIR,EAAae,MAAK,oCANjClB,EAAS,CAAE8B,KAAM,mBAAoBC,QAAS5B,IAC9CW,QAAQe,IAAI,GAADlB,OAAIR,EAAae,MAAK,yBAGjCrB,EAAS,cAGX,EAYwCoB,SAAC,sBACvCK,EAAAA,EAAAA,MAAA,KAAAL,SAAA,CAAG,SAAOE,MACVG,EAAAA,EAAAA,MAAA,KAAAL,SAAA,CAAG,UAAQG,MACXJ,EAAAA,EAAAA,KAAA,OAAKgB,IAAKX,EAAQY,IAAKf,MAG7B,C,kCCpDA,MAEMT,E,QAAMyB,EAAMC,OAAO,CACvBC,QAAS,sBACTC,OAAQ,CACNC,OALW,cAUf7B,EAAI8B,aAAa/B,SAASgC,KACvBhC,IAAc,IAADiC,EACZ,GAAiB,QAAjBA,EAAIjC,EAASI,YAAI,IAAA6B,GAAbA,EAAeC,OAAO,CACxB,MAAMC,EAAaC,KAAKC,KAAKC,SAAStC,EAASI,KAAKmC,aAAc,IAAM,KAAO,EACzEC,EAAcxC,EAASyC,OAAOZ,OAAOa,MAAQ,EASnD,MARyB,CACvBtC,KAAM,CACJuC,OAAQ3C,EAASI,KAAK8B,OACtBU,QAAST,EAAaK,EACtBD,aAAcvC,EAASI,KAAKmC,cAKlC,CACE,OAAOvC,CACT,IAEDK,GAEQwC,QAAQC,OAAOzC,KAI1B,S","sources":["components/MovieDetail.js","services/api.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom'; // Import useNavigate\r\nimport api from '../services/api';\r\nimport { AppContext } from '../Context';\r\n\r\nfunction MovieDetail() {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate(); // Use useNavigate hook for navigation\r\n  const { state, dispatch } = useContext(AppContext);\r\n  const [movieDetails, setMovieDetails] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchMovieDetails = async () => {\r\n      try {\r\n        const response = await api.get(`/?i=${id}`);\r\n        setMovieDetails(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching movie details:', error);\r\n      }\r\n    };\r\n\r\n    fetchMovieDetails();\r\n  }, [id]);\r\n\r\n  const handleAddToFavorites = () => {\r\n    const isAlreadyInFavorites = state.favorites.some((favMovie) => favMovie.imdbID === id);\r\n\r\n    if (!isAlreadyInFavorites) {\r\n      // Assuming 'movieDetails' contains the required details\r\n      dispatch({ type: 'ADD_TO_FAVORITES', payload: movieDetails });\r\n      console.log(`${movieDetails.Title} added to favorites.`);\r\n      \r\n      // Navigate to the favorites page\r\n      navigate('/favorites');\r\n    } else {\r\n      console.log(`${movieDetails.Title} is already in your favorites.`);\r\n    }\r\n  };\r\n\r\n  if (!movieDetails) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  const { Title, Year, Genre, Poster } = movieDetails;\r\n\r\n  return (\r\n    <div>\r\n      <h2>{Title}</h2>\r\n      <button onClick={handleAddToFavorites}>Add to Favorites</button>\r\n      <p>Year: {Year}</p>\r\n      <p>Genre: {Genre}</p>\r\n      <img src={Poster} alt={Title} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MovieDetail;","import axios from 'axios';\r\n\r\nconst apiKey = 'a94409cf';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'https://omdbapi.com',\r\n  params: {\r\n    apikey: apiKey,\r\n  },\r\n});\r\n\r\n// Adding an interceptor to transform the response data format\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    if (response.data?.Search){\r\n      const totalPages = Math.ceil(parseInt(response.data.totalResults, 10) / 10) || 0;\r\n      const currentPage = response.config.params.page || 1;\r\n      const modifiedResponse = {\r\n        data: {\r\n          movies: response.data.Search,\r\n          hasMore: totalPages > currentPage ? true : false,\r\n          totalResults: response.data.totalResults\r\n        }\r\n      };\r\n      //console.log(modifiedResponse);\r\n      return modifiedResponse;\r\n    } else {\r\n      return response;\r\n    }\r\n  },\r\n  (error) => {\r\n    // Handle errors \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"names":["id","useParams","navigate","useNavigate","state","dispatch","useContext","AppContext","movieDetails","setMovieDetails","useState","useEffect","async","response","api","get","concat","data","error","console","fetchMovieDetails","_jsx","children","Title","Year","Genre","Poster","_jsxs","onClick","handleAddToFavorites","favorites","some","favMovie","imdbID","log","type","payload","src","alt","axios","create","baseURL","params","apikey","interceptors","use","_response$data","Search","totalPages","Math","ceil","parseInt","totalResults","currentPage","config","page","movies","hasMore","Promise","reject"],"sourceRoot":""}